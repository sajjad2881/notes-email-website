{"ast":null,"code":"//Part of redux stuff \nimport * as api from '../api'; //Action creators -- function that return actions \n//action is just an opject with type and payload\n//redux thunk allows us to specify an additional arrow function \n//function that returns another function with async capabilities\n\nexport const getNotes = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchNotes();\n    dispatch({\n      type: 'FETCH_ALL',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  } // const action = {type: 'FETCH_ALL,', payload: [] }\n  // dispatch(action);\n\n};\nexport const createNote = note => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createNote(note);\n    dispatch({\n      type: 'CREATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/ileghari/Documents/Projects/notes-email-website/client/src/actions/notes.js"],"names":["api","getNotes","dispatch","data","fetchNotes","type","payload","error","console","log","message","createNote","note"],"mappings":"AAAA;AAEA,OAAO,KAAKA,GAAZ,MAAqB,QAArB,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC9C,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMH,GAAG,CAACI,UAAJ,EAArB;AACAF,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE,WAAP;AAAoBC,MAAAA,OAAO,EAAEH;AAA7B,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH,GAN6C,CAQ9C;AACA;;AACH,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU,MAAOV,QAAP,IAAoB;AACpD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACW,UAAJ,CAAeC,IAAf,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE,QAAP;AAAiBC,MAAAA,OAAO,EAAEH;AAA1B,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH;AAGJ,CATM","sourcesContent":["//Part of redux stuff \n\nimport * as api from '../api'\n\n//Action creators -- function that return actions \n//action is just an opject with type and payload\n//redux thunk allows us to specify an additional arrow function \n//function that returns another function with async capabilities\nexport const getNotes = () => async (dispatch) => {\n    try {\n        const {data} = await api.fetchNotes();\n        dispatch({type: 'FETCH_ALL', payload: data });\n    } catch (error) {\n        console.log(error.message);\n    }\n\n    // const action = {type: 'FETCH_ALL,', payload: [] }\n    // dispatch(action);\n}\n\nexport const createNote = (note) => async (dispatch) => {\n    try {\n        const { data } = await api.createNote(note);\n        dispatch({type: 'CREATE', payload: data});\n    } catch (error) {\n        console.log(error.message);\n    }\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}